# **************************************************************************
AC_INIT(src/simage.c)
AC_CONFIG_AUX_DIR(cfg)

# **************************************************************************
# Check the CVS repository setup

SIM_AC_CVS_CHANGES([
  SIM_AC_CVS_CHANGE([
    rm -rf conf-macros
    cvs co simage-macros
  ], [test -d cfg/m4], [test ! -d conf-macros])
])

# **************************************************************************
# If the Microsoft Visual C++ cl.exe compiler is available, set us up for
# compiling with it and to generate an MSWindows .dll file.

SIM_AC_MSVC_SUPPORT

# **************************************************************************
# Check to see if the compiler supports the ANSI standard, and
# automatically add the necessary options if the compiler defaults
# to K&R C. If no ANSI mode is available, warn. (Don't terminate, as
# C++ compilers won't be strictly ANSI C compliant but most of them
# should still be able to compile the simage code.)

AC_PROG_CC
AM_PROG_CC_STDC

if test x"$am_cv_prog_cc_stdc" = xno; then
  AC_MSG_WARN(doesn't look like you're using an ANSI compatible C compiler)
fi

# **************************************************************************
# *******  MAKING RELEASES  ************************************************
# **************************************************************************
#
# Library versioning
# ==================
#
# When making releases, follow these rules:
#
#  * if there has been made any incompatible changes to the ABI¹:
#    SIMAGE_MAJOR_VERSION += 1, SIMAGE_MINOR_VERSION = 0,
#    SIMAGE_MICRO_VERSION = 0.
#
#    (If you don't know if the changes that have been made since last
#    release is binary incompatible with the last ABI, you shouldn't
#    be making releases.)
#
#  * if there has been made additions to the API², but the ABI
#    is still backwards compatible: SIMAGE_MAJOR_VERSION unchanged,
#    SIMAGE_MINOR_VERSION += 1, SIMAGE_MICRO_VERSION = 0.
#
#  * for bugfix releases and other changes which do not change the interface
#    at all, keep SIMAGE_MAJOR_VERSION and SIMAGE_MINOR_VERSION unchanged
#    and SIMAGE_MICRO_VERSION += 1.
#
# Note that our MAJOR.MINOR.MICRO versioning scheme differs somewhat from
# the idea of library versioning applied by Libtool. According to Libtool,
# libraries should be versioned according to a CURRENT.AGE.REVISION scheme.
# Here CURRENT is supposed to be increased by 1 each time the API changes,
# and AGE increased by 1 along with CURRENT each time the API changes in a
# way which keeps the ABI backwards compatible. If compatibility is broken,
# AGE is set to 0 (while CURRENT is still increased by 1). The REVISION
# number has the same semantics as our MICRO number.
#
# To cooperate in a painless way with Libtool, we choose to "convert" our
# MAJOR.MINOR.MICRO scheme to Libtool's idea of versioning like this:
#
#    * Libtool's CURRENT number is increased when our MAJOR number is
#      increased.
#
#    * Libtool's AGE number is always kept at 0 (i.e. we will never make
#      ABI compatible releases where we increase the MAJOR number).
#
#    * Libtool's REVISION number will be a combination of our MINOR and
#      MICRO number, like this: REVISION = MINOR * 100 + MICRO, so we get
#      a REVISION number monotonically increasing in the way we want.
#
#      Note that this little "simplification" has two important
#      ramifications: 1) we can't make more than 99 bugfix-releases of
#      the library unless a MINOR or MAJOR version increase has happened,
#      2) we need to keep a release history log to map from Libtool numbers
#      back to our "native" MACRO.MINOR.MICRO versioning, as Libtool encodes
#      the filename of the library with it's own CURRENT.AGE.REVISION scheme.
#      This way it'll still be easy for us to find out which version a
#      bugreport belongs to: we must tell the user to check out the full
#      filename of the library, then we can just look up the MAJOR.MINOR.MICRO
#      number from the release history log below.
#
#
# **************************************************************************
# CVS maintenance
# ===============
#
# When making a release from the HEAD branch, increase the MAJOR number
# and make a new branch as follows (from the HEAD):
#
#   $ cd [simage_srcdir_HEADbranch]
#   $ cvs tag -b simage-MAJOR-0
#
# (The explicit mention of "simage" in the branch name is necessary
# because we also tag this name onto all included CVS modules.)
#
# Note that new releases from the HEAD branch should only happen when
# there has been incompatible interface changes.
#
#
# When adding new functionality while keeping backward ABI compatibility,
# increase the MINOR number and make a new branch as follows:
#
#   $ cd [simage_srcdir_MAJORbranch]
#   $ cvs tag -b simage-MAJOR-MINOR
#
# (Where MINOR>0 always).
#
#
# Bugfix releases should be handled by setting a tag on the
# simage-MAJOR-MINOR with the latest MAJOR.MINOR.x release,
# like this:
#
#   $ cd [simage_srcdir_MAJORMINORbranch]
#   $ cvs tag simage-MAJOR-MINOR-MICRO
#
# (Where MICRO>0 always).
#
# **************************************************************************
# Distribution binaries
# =====================
#
#  * MSWindows SDK: this is constructed as a self-extracting InstallShield
#    package. Run ``configure'' and ``make install'' on an MSWin-box with
#    the correct setup (latest Cygwin, MSVC++ v6.0 and InstallShield Express
#    v2.12), then execute
#
#         $ cd [simage_builddir]
#         $ IsxBuild.exe build/simage.iwz -E -O
#
#    A self-extracting executable SETUPEX.EXE with the InstallShield install
#    should then be available under [simage_builddir]/build/simage/. Move
#    to <ftp://ftp.sim.no/pub/coin/bin/win32/simage-sdk-@SIMAGE_VERSION@.exe>.
#
#  * RPM packages: follow the instructions at the top of the
#    build/simage.spec.in file, make one package for each major platform
#    version we have access to (RedHat v5, v6, v7, Mandrake?, SuSE, etc)
#    for the architectures we want (i386, ...). Place packages under
#    <ftp://ftp.sim.no/pub/coin/bin/[platform]/[arch]/>.
#
# **************************************************************************
# Release history
# ===============
#
# Release version     | Libtool version   |                 |
# (MAJOR.MINOR.MICRO) | (CURRENT.AGE.REV) | CVS Branch name | Tag name
# --------------------+-------------------+-----------------+-----------------
#     1.0.0           |     1.0.0         |   simage-1-0    | simage-1-0-0
#
#
# **************************************************************************
# Footnotes
# =========
#
# ¹ Application Binary Interface. This covers any publicly exposed
#   functions, function signatures, structures (and classes for C++
#   code). If any functions has been removed or changed, or if any
#   structures/classes has been modified in any way, the ABI has
#   most likely been made incompatible with earlier releases.
#
# ² Application Programmer's Interface. This is the functions and data
#   structures/classes exposed to the application programmer for
#   interaction with the library.
#
# **************************************************************************

SIMAGE_MAJOR_VERSION=1
SIMAGE_MINOR_VERSION=0
SIMAGE_MICRO_VERSION=0
SIMAGE_VERSION=$SIMAGE_MAJOR_VERSION.$SIMAGE_MINOR_VERSION.$SIMAGE_MICRO_VERSION
VERSION=$SIMAGE_VERSION

AC_SUBST(SIMAGE_MAJOR_VERSION)
AC_SUBST(SIMAGE_MINOR_VERSION)
AC_SUBST(SIMAGE_MICRO_VERSION)
AC_SUBST(SIMAGE_VERSION)


LT_CURRENT=$SIMAGE_MAJOR_VERSION
LT_AGE=0
LT_REVISION=`expr $SIMAGE_MINOR_VERSION \* 100 + $SIMAGE_MICRO_VERSION`

AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)


#  These are for include/simage.h.

AC_DEFINE_UNQUOTED(SIMAGE_MAJOR_VERSION, $SIMAGE_MAJOR_VERSION, [define this to the simage major version number])
AC_DEFINE_UNQUOTED(SIMAGE_MINOR_VERSION, $SIMAGE_MINOR_VERSION, [define this to the simage minor version number])
AC_DEFINE_UNQUOTED(SIMAGE_MICRO_VERSION, $SIMAGE_MICRO_VERSION, [define this to the simage release version number])
AC_DEFINE_UNQUOTED(SIMAGE_VERSION, "$SIMAGE_VERSION", [define this to the full simage major.minor.micro version number])

# **************************************************************************
# Miscellaneous options and initializations.

AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(libsimage, $VERSION)

# Files to cram the configure tests into.
AM_CONFIG_HEADER(config.h include/simage.h)

# Default to not building a static library.
# Can be overridden by the user with --enable-static.
AM_DISABLE_STATIC

# Turn off default maintainer make-rules -- use ./autogen.sh instead.
AM_MAINTAINER_MODE

# Initialize libtool
AC_PROG_LIBTOOL

# These are used for constructing the simage-config file.
SIMAGE_EXTRA_CPPFLAGS=$CPPFLAGS
SIMAGE_EXTRA_LDFLAGS=$LDFLAGS
SIMAGE_EXTRA_LIBS=$LIBS
AC_SUBST(SIMAGE_EXTRA_CPPFLAGS)
AC_SUBST(SIMAGE_EXTRA_LDFLAGS)
AC_SUBST(SIMAGE_EXTRA_LIBS)

# libtiff and libpng uses math library functions.
SIM_AC_CHECK_MATHLIB(SIMAGE_EXTRA_LIBS="$SIMAGE_EXTRA_LIBS $sim_ac_libm",
                     AC_MSG_ERROR(could not find a way to use math library))

# **************************************************************************
# Check if UNGIF support is wanted (and if so, available).

SIM_AC_HAVE_LIBUNGIF_IFELSE([
  AC_DEFINE(HAVE_UNGIFLIB, 1, [Define to use ungif library])
  SIMAGE_EXTRA_CPPFLAGS="$SIMAGE_EXTRA_CPPFLAGS $sim_ac_libungif_cppflags"
  SIMAGE_EXTRA_LDFLAGS="$SIMAGE_EXTRA_LDFLAGS $sim_ac_libungif_ldflags"
  SIMAGE_EXTRA_LIBS="$sim_ac_libungif_libs $SIMAGE_EXTRA_LIBS"
  CPPFLAGS="$CPPFLAGS $sim_ac_libungif_cppflags"
  LDFLAGS="$LDFLAGS $sim_ac_libungif_ldflags"
  LIBS="$sim_ac_libungif_libs $LIBS"
], [
  AC_MSG_WARN(libungif will not be used)
])

AM_CONDITIONAL(SIMAGE_UNGIF_SUPPORT, test x"$sim_ac_have_libungif" = xtrue)

# **************************************************************************
# Check if JPEG support is wanted (and if so, available).

SIM_AC_CHECK_JPEGLIB([
  AC_DEFINE(HAVE_JPEGLIB, 1, [Define to use jpeg library])
  SIMAGE_EXTRA_CPPFLAGS="$SIMAGE_EXTRA_CPPFLAGS $sim_ac_jpegdev_cppflags"
  SIMAGE_EXTRA_LDFLAGS="$SIMAGE_EXTRA_LDFLAGS $sim_ac_jpegdev_ldflags"
  SIMAGE_EXTRA_LIBS="$sim_ac_jpegdev_libs $SIMAGE_EXTRA_LIBS"
], [
  AC_MSG_WARN(libjpeg development system not found)
])

AM_CONDITIONAL(SIMAGE_JPEG_SUPPORT, test x"$sim_ac_jpegdev_avail" = xyes)

# **************************************************************************
# Check if TIFF support is wanted (and if so, available).

SIM_AC_CHECK_TIFFLIB([
  AC_DEFINE(HAVE_TIFFLIB, 1, [Define to use tiff library])
  SIMAGE_EXTRA_CPPFLAGS="$SIMAGE_EXTRA_CPPFLAGS $sim_ac_tiffdev_cppflags"
  SIMAGE_EXTRA_LDFLAGS="$SIMAGE_EXTRA_LDFLAGS $sim_ac_tiffdev_ldflags"
  SIMAGE_EXTRA_LIBS="$sim_ac_tiffdev_libs $SIMAGE_EXTRA_LIBS"
], [
  AC_MSG_WARN(libtiff development system not found)
])

AM_CONDITIONAL(SIMAGE_TIFF_SUPPORT, test x"$sim_ac_tiffdev_avail" = xyes)


# **************************************************************************
# Check if PNG support is wanted (and if so, available).

simage_ac_pnglib=no

# Yep, we can actually check for a negative with_png here, as the
# default is "yes" and the user therefore must explicitly specify
# if he/she does _not_ want the PNG support.

if test x"$with_png" != xno; then
  SIM_AC_CHECK_ZLIB([
    SIMAGE_EXTRA_CPPFLAGS="$SIMAGE_EXTRA_CPPFLAGS $sim_ac_zlib_cppflags"
    SIMAGE_EXTRA_LDFLAGS="$SIMAGE_EXTRA_LDFLAGS $sim_ac_zlib_ldflags"
    SIMAGE_EXTRA_LIBS="$sim_ac_zlib_libs $SIMAGE_EXTRA_LIBS"
  ], [
    AC_MSG_WARN(zlib development system not found)
  ])
  
  if test x"$sim_ac_zlib_avail" = xyes; then
    SIM_AC_CHECK_PNGLIB([
      simage_ac_pnglib=yes
      AC_DEFINE(HAVE_PNGLIB, 1, [Define to use png library])
      SIMAGE_EXTRA_CPPFLAGS="$SIMAGE_EXTRA_CPPFLAGS $sim_ac_pngdev_cppflags"
      SIMAGE_EXTRA_LDFLAGS="$SIMAGE_EXTRA_LDFLAGS $sim_ac_pngdev_ldflags"
      SIMAGE_EXTRA_LIBS="$sim_ac_pngdev_libs $SIMAGE_EXTRA_LIBS"
    ], [
      AC_MSG_WARN(libpng development system not found)
    ])
  else
    AC_MSG_WARN(can't use libpng without zlib)
  fi
fi

AM_CONDITIONAL(SIMAGE_PNG_SUPPORT, test x"$simage_ac_pnglib" = xyes)


# **************************************************************************
# Check if TARGA support is wanted.

AC_ARG_WITH(
  targa,
  AC_HELP_STRING([--with-targa],
                 [include support for Targa images [[default=yes]]]),
	[case "${withval}" in
		yes) want_tga=true ;;
		no)  want_tga=false ;;
		*)   AC_MSG_ERROR(bad value "${withval}" for --with-targa) ;;
	esac],
	[want_tga=true])

AM_CONDITIONAL(TGA_SUPPORT, $want_tga)
if $want_tga; then
  AC_DEFINE(SIMAGE_TGA_SUPPORT, 1, [Define to enable targa support])
fi

# **************************************************************************
# Check if RGB support is wanted.

AC_ARG_WITH(
  rgb,
  AC_HELP_STRING([--with-rgb],
                 [include support for SGI RGB images [[default=yes]]]),
  [case "${withval}" in
    yes) want_rgb=true ;;
    no)  want_rgb=false ;;
    *)   AC_MSG_ERROR(bad value "${withval}" for --with-rgb) ;;
  esac],
  [want_rgb=true])

AM_CONDITIONAL(RGB_SUPPORT, $want_rgb)
if $want_rgb; then
  AC_DEFINE(SIMAGE_RGB_SUPPORT, 1, [Define to enable rgb support])
fi

# **************************************************************************
# Check if PIC support is wanted.

AC_ARG_WITH(
  pic,
  AC_HELP_STRING([--with-pic], [include support for PIC images [[default=yes]]]),
  [case "${withval}" in
      yes) want_pic=true ;;
      no)  want_pic=false ;;
      *)   AC_MSG_ERROR(bad value "${withval}" for --with-pic) ;;
  esac],
  [want_pic=true])

AM_CONDITIONAL(PIC_SUPPORT, $want_pic)
if $want_pic; then
  AC_DEFINE(SIMAGE_PIC_SUPPORT, 1, [Define to enable pic support])
fi

SIM_EXPAND_DIR_VARS

# **************************************************************************
# Remove redundant options from environment variable option lists.

SIM_AC_UNIQIFY_LIST(CPPFLAGS, $CPPFLAGS)
SIM_AC_UNIQIFY_LIST(LDFLAGS, $LDFLAGS)
SIM_AC_UNIQIFY_LIST(LIBS, $LIBS)

SIM_AC_UNIQIFY_LIST(SIMAGE_EXTRA_CPPFLAGS, -I$includedir $SIMAGE_EXTRA_CPPFLAGS)
SIM_AC_UNIQIFY_LIST(SIMAGE_EXTRA_LDFLAGS, -L$libdir $SIMAGE_EXTRA_LDFLAGS)
SIM_AC_UNIQIFY_LIST(SIMAGE_EXTRA_LIBS, $SIMAGE_EXTRA_LIBS)

if $BUILD_WITH_MSVC; then
  CPPFLAGS="-DSIMAGE_MAKE_DLL $CPPFLAGS"

  # FIXME: only when -g is used...
  debugfile=`pwd`/src/simage$SIMAGE_MAJOR_VERSION.pdb
  debugfile=`cygpath -w "$debugfile" | sed 's,\\\\,\\\\\\\\,g'`
  CFLAGS="/Fd$debugfile $CFLAGS"
  DLLFLAGS="/dll"
  DLLFLAGS="$DLLFLAGS /PDB:$debugfile"
  AC_SUBST(DLLFLAGS)

  # We use a version suffix on the .dll-file, so several incompatible
  # (major) versions can be installed on a system.
  #
  # BTW, when linking DLLs, the 3rd-party .lib files will be
  # linked into the .dll file. I believe it is still advisable to
  # list all libs used upon `simage-config --libs`, as we can then
  # also use them from "parent" code (remember that their interfaces
  # is not exposed from the DLL) without any fuss.
  SIMAGE_EXTRA_LIBS="-lsimage$SIMAGE_MAJOR_VERSION $SIMAGE_EXTRA_LIBS"

  # These are for the .iwz InstallShield Express file under build/.
  win_includedir=`cygpath -w $includedir`
  AC_SUBST(win_includedir)
  win_libdir=`cygpath -w $libdir`
  AC_SUBST(win_libdir)

else
  SIMAGE_EXTRA_LIBS="-lsimage $SIMAGE_EXTRA_LIBS"

  # For the build/simage.spec RPM specification file.
  SIM_AC_ISO8601_DATE(simage_configure_date)
  AC_SUBST(simage_configure_date)
fi

simage_srcdir_dos=`cygpath -w "$srcdir"`
AC_SUBST(simage_srcdir_dos)

# **************************************************************************

AC_OUTPUT([
	Makefile
	src/Makefile
	build/simage.spec
	build/simage.nsi
	simage-config
], [
	chmod a+x simage-config
])

# **************************************************************************
